stages:
  - build
  - dockerize
  - deploy

variables:
  HARBOR_REPO: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/easyoa-server
  DOCKER_IMAGE_TAG: $CI_COMMIT_REF_SLUG
  HARBOR_USERNAME: $HARBOR_USERNAME
  HARBOR_PASSWORD: $HARBOR_PASSWORD
  SSH_PRIVATE_KEY: $DEPLOY_KEY
  MAVEN_CLI_OPTS: "-s settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2"
  HARBOR_IMAGE: ${HARBOR_REPO}/easyoaserver
  DOCKERFILE_PATH: "."
  SSH_HOST: $DEPLOY_HOST # 定义 SSH_HOST 环境变量
  SSH_USER: $DEPLOY_USER # 定义 SSH_USER 环境变量

before_script:
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  - chmod 700 ~/.ssh
  - chmod 600 ~/.ssh/id_rsa

cache:
  paths:
    - .m2/repository/
    - target/

build:
  stage: build
  tags:
    - aifile
  script:
    - mvn $MAVEN_CLI_OPTS clean package
  artifacts:
    paths:
      - target/

dockerize:
  stage: dockerize
  tags:
    - aifile
  image: docker:latest # 使用官方的 Docker 镜像
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  script:
    - docker build -t $HARBOR_IMAGE:$DOCKER_IMAGE_TAG $DOCKERFILE_PATH
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" $HARBOR_REPO
    - docker push $HARBOR_IMAGE:$DOCKER_IMAGE_TAG

deploy:
  stage: deploy
  tags:
    - aifile
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s) # 启动 ssh-agent
    - ssh-add ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker login -u $HARBOR_USERNAME -p $HARBOR_PASSWORD $HARBOR_REPO"
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker pull $HARBOR_IMAGE:$DOCKER_IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker stop easyoa-server || true && docker rm easyoa-server || true"
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "docker run -d --name easyoa-server $HARBOR_IMAGE:$DOCKER_IMAGE_TAG"
  only:
    - master