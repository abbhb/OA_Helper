server:
  port: 55550
  servlet:
    # Controller统一前缀
    context-path: /api
spring:

  servlet:
    multipart:
      max-file-size: -1
      max-request-size: -1
  profiles:
    # 发版前一定记得改成prod 不然流水线会以dev打包
    active: prod
  application:
    name: printes
  datasource:
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://${helper.mysql.ip}:${helper.mysql.port}/easy_oa?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
      username: ${helper.mysql.username}
      password: ${helper.mysql.password}
    type: com.alibaba.druid.pool.DruidDataSource
  redis:
    database: ${helper.redis.database}
    port: ${helper.redis.port}
    timeout: 1800000
    host: ${helper.redis.ip}

  mail:
    #smtp服务主机  127.0.0.1 本机服务
    host: ${helper.email.smtp.host}
    #服务协议
    protocol: smtp
    #发送邮件的账户
    username: ${helper.email.username}
    #授权码
    password: ${helper.email.password}
    test-connection: false
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  activiti:
    #4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
    database-schema-update: true
    #检测历史表是否存在 activiti7默认没有开启数据库历史记录 启动数据库历史记录
    db-history-used: true
    #记录历史等级 可配置的历史级别有none, activity, audit, full
    #full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。
    history-level: full
    #校验流程文件，默认校验resources下的processes文件夹里的流程文件
    check-process-definitions: false
  ldap:
    urls: ${helper.ldap.urls}
    username: ${helper.ldap.username}
    password: ${helper.ldap.password}
    base: ${helper.ldap.base}

mybatis-plus:
  configuration:
    #在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射
    map-underscore-to-camel-case: true
    #上边这个开启sql日志
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    cache-enabled: false
  global-config:
    #雪花算法
    db-config:
      id-type: ASSIGN_ID

# ====================== ↓↓↓↓↓↓ MinIO文件服务器 ↓↓↓↓↓↓ ======================
minio:
  url: ${helper.minio.address}
  accessKey: ${helper.minio.accessKey}
  secretKey: ${helper.minio.secretKey}
  bucketName: ${helper.minio.bucketName}

# ====================== ↓↓↓↓↓↓ CAS认证相关配置 ↓↓↓↓↓↓ #############################################
# cas:废弃，之前用作接入第三方oauth2登录
cas:
  baseUrl: http://10.15.247.254:55555/
  clientId: 93519f52770144c7afa01c1f76409d81
  clientSecret: 0a28768c96db4ab79eec56b70fade03c
study:
  minOldTime: 420 #单位：分钟
  # 就是10点前的意思
  maxFirstTime: 10

rocketmq:
  name-server: ${helper.rocketmq.ip}:${helper.rocketmq.port}

  # 默认的消息组
  producer:
    group: chatGroup
    send-message-timeout: 10000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    retry-times-when-send-failed: 3 # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 3 # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    #access-key: admin # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    #secret-key: aizhineng1404 # Secret Key
    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
  # Consumer 配置项
  consumer:

    #access-key: admin # Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档
    #secret-key: aizhineng1404 # Secret Key
    listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
      erbadagang-consumer-group:
        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费
chatai:
  chatgpt:
    use: true
    AIUserId: 10010
    key: sk-Ie3HooYekeQy9G678c4eDe13B18c42A8979927D8D21aF8Eb
    proxyUrl: https://api.gpts.vin/v1/chat/completions
  chatglm2:
    use: false
# 后期创建个initsql，这些默认是不用变的
system-message:
  userId: 10011
  roomId: 2
system-tip-message:
  userId: 10012
  enable: true
my-consul:
  ip: ${helper.consul.ip}
  port: ${helper.consul.port}
  printDeviceConsulName: 打印机服务注册
  signinConsulName: signin
  face2arrayServiceConsulName: face2array_service

# oauth的配置
oauth:
  use: true
  frontAddress: https://i.easyus.top
# 验证码
vail-code:
  # 滑块验证码验证
  imageVailUse: true
  # 邮箱验证码验证
  emailVailUse: true


# authn
authn:
  hostname: ${helper.authn.hostname}
  display: ${helper.authn.display}
  origin: ${helper.authn.origin}

ikuai:
  ip: 10.15.247.251
  port: 13170