<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.qc.printers.common.activiti.mapper.TableMapper">
    <select id="tableList" resultType="com.qc.printers.common.activiti.entity.TableInfo">
        select
        table_name, table_comment, create_time
        from information_schema.tables
        where table_schema = (select database()) and table_name NOT LIKE 'act_%' and table_name NOT LIKE 'sys_%'
        <if test="tableName != null and tableName.trim() != ''">
            and table_name like concat('%', #{tableName}, '%')
        </if>
        order by create_time desc
    </select>

    <select id="tableColumns" resultType="com.qc.printers.common.activiti.entity.TableColumns">
        select column_name, data_type, column_comment, column_key
        from information_schema.columns
        where table_name = #{tableName}
        and table_schema = (select database())
        <if test="columnKey != null and columnKey != ''">
            and column_key = #{columnKey}
        </if>
        order by ordinal_position
    </select>

    <insert id="createTable">
        CREATE TABLE `${tableName}` (
        `${idName}` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '主键ID',
        <foreach item="item" index="index" collection="columns">
            `${item.columnName}` ${item.dataType}
            <if test="item.columnLength != -1">
                (#{item.columnLength})
            </if>
            <if test="item.dataType == 'varchar'">
                CHARACTER SET utf8mb4 COLLATE utf8mb4_bin
            </if>
            DEFAULT NULL COMMENT #{item.columnComment},
        </foreach>
        PRIMARY KEY (`${idName}`) USING BTREE
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC COMMENT=#{tableComment};
    </insert>

    <select id="exist" resultType="long">
        select count(1)
        from ${tableName}
        where ${idName} = #{idValue}
    </select>

    <insert id="insertData">
        insert into `${tableName}`
        <foreach collection="listData.keys" item="name" open="(" close=")" separator=",">
            `${name}`
        </foreach>
        values
        <foreach collection="listData.values" item="value" open="(" close=")" separator=",">
            #{value}
        </foreach>
    </insert>

    <update id="updateDataById">
        update `${tableName}` set
        <foreach collection="listData" index="key" item="value" separator=",">
            `${key}` = #{value}
        </foreach>
        where `${idName}` = #{idValue}
    </update>
</mapper>